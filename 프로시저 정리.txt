* 로그인
    CREATE OR REPLACE PROCEDURE login
    (
    --파라미터 로그인ID , 로그인비밀번호
        pid u_info.user_id%type
        , ppwd u_info.user_password%type
        ,  plevel u_info.user_level%type
    ) 
    IS 
        vid u_info.user_id%type := pid;   
        vpwd u_info.user_password%type := ppwd;
        vlevel u_info.user_level%type := plevel; 
    
    BEGIN
        SELECT user_id , user_password, user_level  
        INTO vid , vpwd, vlevel 
        FROM u_info 
        WHERE user_id = vid AND user_password = vpwd;


        if vid = pid AND vpwd = ppwd AND plevel = '2' then  
        DBMS_OUTPUT.PUT_LINE('관리자로그인성공!');        
        ELSIF vid = pid AND plevel = '1' then
        DBMS_OUTPUT.PUT_LINE('사용자로그인성공!');
        else 
        DBMS_OUTPUT.PUT_LINE('비회원로그인 성공!');
        -- 레벨 =0
        END if;
        
    EXCEPTION 
    WHEN NO_DATA_FOUND then
        DBMS_OUTPUT.PUT_LINE('비밀번호 또는 ID가 일치하지 않습니다');
    END;
       




execute login('ABC456','INFP','2'); -- 관리자
execute login('ABC123','ESFP','1'); -- 사용자
execute login('비회원1','비회원1','0'); -- 비회원
execute login('','12','O'); -- 없는 비번
	

* 자주하는 질문 
create or replace PROCEDURE sel_freq_que
(
    vnumber freq_qna.freq_number%TYPE
)
IS
    vfreq_question freq_qna.freq_question%TYPE;
    vfreq_answ freq_qna.freq_answ%TYPE;
BEGIN
    SELECT freq_question, freq_answ INTO vfreq_question, vfreq_answ
    FROM freq_qna
    WHERE vnumber = freq_number;
    DBMS_OUTPUT.PUT_LINE('Q. ' || vfreq_question || CHR(10) || 'A. ' || vfreq_answ);
EXCEPTION 
    WHEN NO_DATA_FOUND 
    THEN DBMS_OUTPUT.PUT_LINE('데이터 값이 없습니다.');
END;


execute sel_freq_que('FQ-1');


	

* 안전수칙
CREATE OR REPLACE PROCEDURE check_safety
(
    p_num IN safety.safety_contents%TYPE
)
IS
    CURSOR v_cursor IS 
    SELECT safety_contents
    FROM safety
    WHERE safety_num = p_num;


    v_safety safety.safety_contents%TYPE;
    


BEGIN
    DBMS_OUTPUT.PUT_LINE('안전수칙 내용');
    
    OPEN v_cursor;
    LOOP
        FETCH v_cursor INTO v_safety;
        EXIT WHEN v_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_safety);


    END LOOP;
     IF v_cursor%rowcount = 0 THEN
        DBMS_OUTPUT.PUT_LINE('해당 데이터가 없습니다');
        END IF;
        clo
se v_cursor;
        END;


EXECUTE check_safety('S-1')
	

* 회원정보 조회
CREATE OR REPLACE PROCEDURE user_info_select
(
    p_user_id IN u_info.user_id%TYPE
)
IS
    v_user_id u_info.user_id%TYPE;
    v_ticket_code u_info.ticket_code%TYPE;
    v_user_password u_info.user_password%TYPE;
    v_user_name u_info.user_name%TYPE;
    v_user_email u_info.user_email%TYPE;
    v_user_phone_num u_info.user_phone_num%TYPE;
    v_user_gender u_info.user_gender%TYPE;
    v_user_birth u_info.user_birth%TYPE;
    v_user_weight u_info.user_weight%TYPE;
    v_user_level u_info.user_level%TYPE;
    v_level_type VARCHAR2(10);
    v_ticket_type VARCHAR2(10);
    CURSOR v_cur_info IS (
        SELECT user_id, ticket_code, user_password, user_name, user_email, user_phone_num, user_gender, user_birth, user_weight, user_level
        FROM u_info
        WHERE user_id = p_user_id AND p_user_id NOT LIKE '%비회원%'
    );
BEGIN
    DBMS_OUTPUT.PUT_LINE( '회원정보 조회' || chr(10) || '출력일자 : ' || SYSDATE || chr(10) ||
    '[회원아이디]' || ' ' || '[이용권식별번호]' || ' ' || '[이용권유형]' || ' ' || '[회원비밀번호]' || ' ' || '[회원이름]' || ' ' || 
    '[회원이메일]' || ' ' || '[회원전화번호]' || ' ' || '[회원성별]' || ' ' || '[회원생년월일]' || ' ' || 
    '[회원체중]' || ' ' || '[회원레벨]' || chr(10) ||
    '-----------------------------------------------------------------------------------------------------' );
    OPEN v_cur_info;
    LOOP
    FETCH v_cur_info INTO v_user_id, v_ticket_code, v_user_password, v_user_name, v_user_email, v_user_phone_num, v_user_gender, v_user_birth, v_user_weight, v_user_level;
        EXIT WHEN v_cur_info%NOTFOUND;
        IF SUBSTR( v_ticket_code, 1, 1 ) = 1 THEN v_ticket_type := '일일권';
        ELSIF SUBSTR( v_ticket_code, 1, 1 ) = 2 THEN v_ticket_type := '정기권';
        END IF;
        IF v_user_level = 1 THEN 
            v_level_type := '회원';
        ELSIF v_user_level = 2 THEN 
            v_level_type := '관리자';
        END IF;
            DBMS_OUTPUT.PUT_LINE( 
            ' ' || v_user_id || chr(9) || chr(9) || chr(9) || v_ticket_code || chr(9) || chr(9) || chr(9) || v_ticket_type || chr(9) || chr(9) || v_user_password || chr(9) || 
            v_user_name || chr(9) || v_user_email || chr(9) || v_user_phone_num || chr(9) || v_user_gender || chr(9) || 
            v_user_birth || chr(9) || chr(9) || v_user_weight || chr(9) || chr(9) || chr(9) || v_level_type
            );
    END LOOP;
        IF v_cur_info%ROWCOUNT = 0 THEN DBMS_OUTPUT.PUT_LINE('해당하는 데이터가 없습니다.');
        END IF;
    CLOSE v_cur_info;
END;


EXECUTE user_info_select ('ABC123')
	

* 회원 탈퇴
CREATE OR REPLACE PROCEDURE user_delete
(
    p_user_id IN u_info.user_id%TYPE
)
IS
BEGIN
    DELETE FROM u_info
    WHERE user_id = p_user_id;
        DBMS_OUTPUT.PUT_LINE(p_user_id || ' 회원님의 정보가 삭제되었습니다.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('해당 회원이 존재하지 않습니다.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('삭제 중 오류가 발생했습니다.');
END;
	

오소리 누구인가.. 오솔오솔!
* 공지사항
CREATE OR REPLACE PROCEDURE notice_view
(
    p_notice_no IN notice.notice_no%TYPE
)
IS
    v_notice_no notice.notice_no%TYPE;
    v_notice_title notice.notice_title%TYPE;
    v_notice_content notice.notice_content%TYPE;
    v_notice_date notice.notice_date%TYPE;


    CURSOR v_cursor IS (
        SELECT notice_no, notice_title, notice_content, notice_date
        FROM notice
        WHERE notice_no = p_notice_no 
    );
BEGIN 
    OPEN v_cursor;
        FETCH v_cursor INTO v_notice_no, v_notice_title, v_notice_content, v_notice_date;
        IF v_cursor%NOTFOUND THEN DBMS_OUTPUT.PUT_LINE('해당하는 공지사항이 없습니다.');
        ELSE 
        DBMS_OUTPUT.PUT_LINE( '공지사항' || chr(10) || TO_CHAR( v_notice_date, 'YYYY.MM.DD' )  || chr(10) || 
        '------------------------------------------------------------------------------------------------------------------------------' 
        || chr(10) || '제목 : ' || v_notice_title || chr(10) ||  v_notice_content  );
        END IF;
    CLOSE v_cursor;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('예외가 발생했습니다. : ' || SQLERRM);
END ;


EXEC notice_view('N-2'); – 실행문
	

나는 커서의 마스터 오소리!


* 정기권, 일일권 입력하면 목록 뽑아오는 코드
CREATE OR REPLACE PROCEDURE check_day_tickets
(
    p_type IN ticket.ticket_type%TYPE
)
IS
    CURSOR c_ticket IS
        SELECT ticket_type, ticket_period, ticket_timepass, ticket_price
        FROM ticket
        WHERE ticket_type = p_type;
    v_type ticket.ticket_type%TYPE;
    v_period ticket.ticket_period%TYPE;
    v_timepass ticket.ticket_timepass%TYPE;
    v_price ticket.ticket_price%TYPE;
BEGIN
     IF p_type = '일일권' OR p_type = '정기권' THEN
        DBMS_OUTPUT.PUT_LINE( CHR(10) || '   ' || ' 종류  기간  시간  금액 ' );
        OPEN c_ticket;
        LOOP
            FETCH c_ticket INTO v_type, v_period, v_timepass, v_price;
            EXIT WHEN c_ticket%NOTFOUND;
            IF v_type = '일일권' THEN
                DBMS_OUTPUT.PUT_LINE( CHR(9) || v_type || ' ' || v_period || ' ' || v_timepass || ' ' || v_price);
            ELSIF v_type = '정기권' THEN
                DBMS_OUTPUT.PUT_LINE( CHR(9) || v_type || ' ' || v_period || ' ' || v_timepass |
| ' ' || v_price);
            END IF;
        END LOOP;
        CLOSE c_ticket;
    ELSE
        RAISE_APPLICATION_ERROR(-20000, '잘못된 정보입니다. 존재하지 않는 이용권입니다.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error Code: ' || SQLCODE || ' ' || SQLERRM);    
END;
EXECUTE check_day_tickets('일일권');
EXECUTE check_day_tickets('정기권');
EXECUTE check_day_tickets('정');


	





* 자전거 상태 조회
CREATE OR REPLACE PROCEDURE sel_bike_status
(
    pbike_status bic_info.bicycle_status%type
)
IS
    
    vbike_id bic_info.bicycle_id%type;
    vbicycle_model bic_info.bicycle_model%type;
    vbicycle_status bic_info.bicycle_status%type;
    
    CURSOR vcursor IS(
    SELECT bicycle_id, bicycle_model , bicycle_status
    FROM bic_info
    WHERE  bicycle_status = pbike_status
    
    );
BEGIN


    
    DBMS_OUTPUT.PUT_LINE('현재 상태 : '|| pbike_status);
    OPEN vcursor;
    LOOP
        FETCH vcursor INTO vbike_id, vbicycle_model , vbicycle_status;
        EXIT WHEN vcursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(vbike_id || ' ' || vbicycle_model);
    END LOOP;
    CLOSE vcursor;
 
END;




EXEC sel_bike_status('수리중');


	



* 대여가능 자전거 일반/새싹
        CREATE OR REPLACE PROCEDURE sel_bike_quantity
(
    ppaking_address bic_info.bicycle_stand%type
)
IS
    vparking_address bic_info.bicycle_stand%type := ppaking_address;
    vstand_id bic_std.stand_id%type;
    vcommon_bike number;
    vsprout_bike number ; 
    
BEGIN
    SELECT COUNT(*) 
    INTO vcommon_bike
    FROM bic_info
    WHERE bicycle_stand = ppaking_address AND bicycle_model= '일반' AND bicycle_status = '비치중';


    SELECT COUNT(*) 
    INTO vsprout_bike
    FROM bic_info
    WHERE bicycle_stand = ppaking_address AND bicycle_model= '새싹' AND bicycle_status = '비치중';
    
    
    SELECT stand_id 
    INTO vstand_id
    FROM bic_std
    WHERE stand_name = ppaking_address;
    DBMS_OUTPUT.PUT_LINE(vstand_id||vparking_address);
    DBMS_OUTPUT.PUT_LINE('일반 따릉이 : '|| ' ' || vcommon_bike);
    DBMS_OUTPUT.PUT_LINE('새싹 따릉이 : '|| ' ' || vsprout_bike);
END;
EXEC sel_bike_quantity('MBC 앞');
	



* 1대 1 문의 글 제목/내용에 포함된 키워드로 회원 본인이 작성한 답변완료/문의접수된 목록 확인하기


CREATE OR REPLACE PROCEDURE check_my_qna
(
    p_login_id IN qna.user_id%TYPE
    , p_keyword IN qna.inquiry_title%TYPE
)
IS
    c_inquiry SYS_REFCURSOR;
    v_inquiry_title qna.inquiry_title%TYPE := p_keyword;
    v_content qna.inquiry_contents%TYPE := p_keyword;
    v_inquiry_id answ.inquiry_id%TYPE;
    v_user_id qna.user_id%TYPE := p_login_id;
    v_reg_date qna.inquiry_reg_date%TYPE;
    v_inquiry_status VARCHAR2(20);
    
BEGIN
    DBMS_OUTPUT.PUT_LINE( CHR(10) || ' 검색 내용을 입력해주세요. ' || CHR(10) );
    DBMS_OUTPUT.PUT_LINE( CHR(9) || CHR(9) || CHR(9) || CHR(9) ||' [ 조회된 문의글 목록 ] ' || CHR(9) || CHR(9) || CHR(9) );
    DBMS_OUTPUT.PUT_LINE( CHR(9) || CHR(9) || CHR(9) || ' [ 제목 ] ' || CHR(9) || CHR(9) || CHR(9) || ' [ 답변 상태 ] ' || CHR(9) || ' [ 날짜 ] ');
        
    OPEN c_inquiry FOR
    SELECT q.inquiry_title
        , CASE 
               WHEN a.reply_content IS NOT NULL THEN '답변완료'
               ELSE '문의접수됨'
           END v_inquiry_status
        , q.inquiry_reg_date
    FROM qna q
    LEFT OUTER JOIN answ a ON q.inquiry_id = a.inquiry_id
    WHERE ( q.user_id = v_user_id )
            AND ( q.inquiry_title LIKE '%' || v_inquiry_title || '%' 
            OR  q.inquiry_contents LIKE '%' || v_content || '%' );
        LOOP
        FETCH c_inquiry INTO v_inquiry_title, v_inquiry_status, v_reg_date;
        EXIT WHEN c_inquiry%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE( v_inquiry_title || CHR(9) || v_inquiry_status || CHR(9) || CHR(9) || v_reg_date );
        END LOOP;
        IF c_inquiry%rowcount = 0 THEN
        DBMS_OUTPUT.PUT_LINE('해당 데이터가 없습니다');
        END IF;
    CLOSE c_inquiry;
END;


EXECUTE check_my_qna('ABC123', '따릉이');
EXECUTE check_my_qna('ABC456', '마일리지');
EXECUTE check_my_qna('ABC910', '언제');
EXECUTE check_my_qna('ABC910', '사과');


	



* 회원 id별 이용권 주문내역(사용자ID, 주문번호: P-1,  이용권 종류: 정기권, 이용권일수: 7일, 이용권시간:1시간, 이용권 주문일자:23/04/03)


CREATE OR REPLACE PROCEDURE get_user_ticket_info(
    p_user_id IN t_order.user_id%TYPE
) AS
    c_user_tickets SYS_REFCURSOR;
    v_user_id t_order.user_id%TYPE;
    v_voucher_id t_order.voucher_id%TYPE;
    v_ticket_type VARCHAR2(10);
    v_rental_date VARCHAR2(10);
    v_rental_time VARCHAR2(10);
    v_order_paidtime t_order.order_paidtime%TYPE; 


BEGIN
    OPEN c_user_tickets FOR
        SELECT t.voucher_id, t.user_id,
            CASE SUBSTR(t.ticket_code, 1, 1)
                WHEN '1' THEN '일일권'
                WHEN '2' THEN '정기권'
            END AS ticket_type,
            CASE SUBSTR(t.ticket_code, 3, 1)
                WHEN '1' THEN '7일'
                WHEN '2' THEN '30일'
                WHEN '3' THEN '180일'
                WHEN '4' THEN '365일'
                ELSE '  '
            END AS ticket_date,
            CASE SUBSTR(t.ticket_code, 2, 1)
                WHEN '2' THEN '2시간'
                WHEN '1' THEN '1시간'
                ELSE '  '
            END AS ticket_time,
            t.order_paidtime -- v_order_paidtime 대신에 컬럼명을 사용
        FROM t_order t
        WHERE t.user_id = p_user_id;


    LOOP
        FETCH c_user_tickets INTO v_voucher_id, v_user_id, v_ticket_type, v_rental_date, v_rental_time, v_order_paidtime;    
    EXIT WHEN c_user_tickets%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(' 사용자 ID: ' || v_user_id || ', 이용권 주문번호: ' || v_voucher_id || ',  이용권 종류: ' || v_ticket_type || ', 이용권일수: ' || v_rental_date || ', 이용권시간: '||v_rental_time || ', 이용권 결제일자: '||v_order_paidtime); 
    END LOOP;
   
    IF c_user_tickets%rowcount = 0 THEN
        DBMS_OUTPUT.PUT_LINE('해당 사용자의 이용권 데이터가 없습니다.');
    END IF;


END;




	



* 검색 주변 대여소 조회
CREATE OR REPLACE PROCEDURE sel_std
(
    paround_address bic_std.stand_address%type


)
IS
    varound_address bic_std.stand_address%type := paround_address;
    
    vbike_model bic_info.bicycle_model%type;
    vcommon_bike_model number;
    vsprout_bike_model number;
    CURSOR vcursor IS(
    SELECT stand_address
    FROM  bic_std bs, bic_info bi
      WHERE stand_address LIKE ('%'||varound_address||'%')


    );   
BEGIN
    DBMS_OUTPUT.PUT_LINE('주변 대여소 목록');


    OPEN vcursor;
    LOOP
        FETCH vcursor INTO varound_address;
        EXIT WHEN vcursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(varound_address ||  vcommon_bike_model || vsprout_bike_model);
    END LOOP;
    CLOSE vcursor;
END;
EXEC sel_around_address('송파');
	





* 이용권 구매하면 회원 이용권 회원정보에서 이용권 식별번호 update 하기


CREATE OR REPLACE PROCEDURE ins_ticket_order
(
  pvoucher_id t_order.voucher_id%type,
  puser_id t_order.user_id%type,
  pticket_code t_order.ticket_code%type,
  ppayment_service_code t_order.payment_service_code%type,
  porder_duration_start t_order.order_duration_start%type,
  porder_duration_end t_order.order_duration_end%type,
  porder_fee t_order.order_fee%type,
  porder_paidtime t_order.order_paidtime%type
)
IS
  vuser_id t_order.user_id%type := puser_id;
BEGIN
  INSERT INTO t_order 
  VALUES (
    pvoucher_id, puser_id, pticket_code, ppayment_service_code
    ,porder_duration_start, porder_duration_end, porder_fee, porder_paidtime
  );
  UPDATE u_info
  SET ticket_code = pticket_code
  WHERE user_id = puser_id;
END;


execute ins_ticket_order('P-15','ABC123',11,'휴대폰결제','2023-4-4','2023-4-6',3000,'2023-4-3');


select * from t_order;


select * from u_info
	



* 사용자 방치 신고 시 프로시저
-- 이 프로시저는 사용자가 방치자전거를 신고접수 하기 위한 프로시저이다.
-- 프로시저 작동 시, bic_info 테이블의 자전거 상태가 '방치' 상태로 바뀌어야 하고
-- bic_leave 테이블에 해당 자전거의 번호가 접수되어야 한다.
-- 수리, 파기 중인 자전거는 접수 불가능 하므로 '접수 불가능' 문구를 띄우고 ROLLBACK하는 처리를 해주어야 한다.
-- 이미 방치 접수된 자전거 고유 식별번호가 방치신고 되었다면(중복), 등록할 수 없다는 문구를 띄우고 중복접수되지 않도록 해야한다.
-- 만약 방치접수한 자전거 고유 식별번호가 자전거 분실 bic_lost 테이블에 등록되어 있다면,
-- 프로시저 실행 시 해당 행이 삭제되어야 한다.
CREATE OR REPLACE PROCEDURE INS_leave
(
    p_bic_id bic_leave.bicycle_id%TYPE
    , p_leave_add bic_leave.leave_address%TYPE
    , p_add_detail bic_leave.leave_address_detail%TYPE
)
IS
    v_leave_id bic_leave.bicycle_leave_id%TYPE;
    v_new_bic_id bic_leave.bicycle_id%TYPE := 'SPB-' || LPAD(p_bic_id, 3, '0');
    v_status bic_info.bicycle_status%TYPE;
    v_lost_cnt INTEGER;
    v_repair_cnt INTEGER;
    v_dest_cnt INTEGER;
    v_leave_cnt INTEGER;
BEGIN
    SELECT MAX(SUBSTR(bicycle_leave_id, -1)) + 1 INTO v_leave_id
    FROM bic_leave;
    
    INSERT INTO bic_leave(bicycle_leave_id, bicycle_id, leave_address, leave_address_detail)
    VALUES('Leave-' || v_leave_id, v_new_bic_id, p_leave_add, p_add_detail);
    
    SELECT COUNT(*) INTO v_leave_cnt
    FROM bic_leave
    WHERE bicycle_id = v_new_bic_id;
    
    SELECT bicycle_status INTO v_status
    FROM bic_info
    WHERE bicycle_id = v_new_bic_id;
    
    SELECT COUNT(*) INTO v_lost_cnt
    FROM bic_lost
    WHERE bicycle_id = v_new_bic_id;
    
    SELECT COUNT(*) INTO v_repair_cnt
    FROM bic_repr
    WHERE bicycle_id = v_new_bic_id;
    
    SELECT COUNT(*) INTO v_dest_cnt
    FROM bic_dest
    WHERE bicycle_id = v_new_bic_id;
    
    IF v_status = '대여중' THEN
        UPDATE bic_info
        SET bicycle_status = '방치접수됨'
        WHERE bicycle_id = v_new_bic_id;
        DBMS_OUTPUT.PUT_LINE(' 방치 등록접수 되었습니다. ');   
    ELSIF v_lost_cnt > 0 THEN
        DBMS_OUTPUT.PUT_LINE(' 방치 등록접수 되었습니다. '); 
        UPDATE bic_info
        SET bicycle_status = '방치접수됨'
        WHERE bicycle_id = v_new_bic_id;
            
        DELETE FROM bic_lost
        WHERE bicycle_id = v_new_bic_id;
    ELSIF v_status = '비치중' THEN
        DBMS_OUTPUT.PUT_LINE(' 방치 등록접수 되었습니다. '); 
        UPDATE bic_info
        SET bicycle_stand = null
        WHERE bicycle_id = v_new_bic_id;
        UPDATE bic_info
        SET bicycle_status = '방치접수됨'
        WHERE bicycle_id = v_new_bic_id;
    ELSIF v_repair_cnt > 0 THEN
        DBMS_OUTPUT.PUT_LINE(' 방치 등록할 수 없는 자전거 입니다. ');
        ROLLBACK;
    ELSIF v_repair_cnt > 0 OR v_dest_cnt > 0 THEN
        DBMS_OUTPUT.PUT_LINE(' 방치 등록할 수 없는 자전거 입니다. ');
        ROLLBACK;
    ELSE
        DBMS_OUTPUT.PUT_LINE('이미 방치 등록된 자전거 입니다. ');
        ROLLBACK;
    END IF; 
    --COMMIT;
--EXCEPTION 
END;
-- Procedure INS_LEAVE이(가) 컴파일되었습니다.


COMMIT;
ROLLBACK;


-------EXECUTE 방법으로 테스트, 순서대로 들어가도록 하기


SELECT*
FROM bic_info;


SELECT*
FROM bic_leave;


SELECT*
FROM bic_lost;


SELECT*
FROM bic_dest;


SELECT*
FROM bic_repr;


EXEC INS_leave(1, '경기도 과천시 은행나무1길 42', '죽바위 어린이 공원 옆');
-- 기존에 '대여중' 상태인 자전거
-- 1. '방치 등록접수 되었습니다.' 문구가 뜨고
-- 2. bic_info 테이블 에서 SPB-001 자전거 상태가 '방치접수됨' 으로 바뀌고,
-- 3. bic_leave 테이블에 해당 자전거의 번호가 접수되어야 함.


EXEC INS_leave(23, '서울특별시 종로구 사직로 161 경복궁', '영추문 옆');
-- 기존에 '비치중' 상태인 자전거
-- 1. '방치 등록접수 되었습니다.' 문구가 뜨고
-- 2. bic_info 테이블 에서 SPB-023 자전거 상태가 '방치접수됨' 으로 바뀌고, 자전거가 가진 대여소 이름이 삭제됨.
-- 3. bic_leave 테이블에 해당 자전거의 번호가 접수되어야 함.


EXEC INS_leave(48, '서울특별시 관악구 남부순환로 1915', '이디야 커피 옆');
-- 기존에 '분실' 상태인 자전거 SPB-048
-- 1. '방치 등록접수 되었습니다.' 문구가 뜨고
-- 2. bic_info 테이블 에서 SPB-048 자전거 상태가 '방치접수됨' 으로 바뀌고,
-- 3. bic_lost 분실 테이블에서는 SPB-048의 행이 삭제되어야 함.
-- 4. bic_leave 테이블에 해당 자전거의 번호가 추가되어야 함.


EXEC INS_leave(39, '서울특별시 동작구 흑석로 91', '본죽 옆');
-- 기존에 '수리중' 상태인 자전거 SPB-039
-- 수리, 파기 중인 자전거는 접수 불가능 하므로
-- 1. '접수 불가능' 문구를 띄우고
-- 2. ROLLBACK하는 처리를 해주어야 한다.
-- 3. 그러면 'SPB-039' 자전거는 bic_info 테이블에서 기존과 같은 값인 '수리중'을 유지해야 하고
-- 4. bic_leave 테이블에도 해당 자전거의 번호에 해당되는 행이 추가되지 않아야 함.


EXEC INS_leave(43, '서울특별시 용산구 서빙고로 139 국립한글박물관', '국립중앙박물관 남문 근처');
-- 기존에 '파기' 상태인 자전거
-- 수리, 파기 중인 자전거는 접수 불가능 하므로
-- 1. '접수 불가능' 문구를 띄우고
-- 2. ROLLBACK하는 처리를 해주어야 한다.
-- 3. 그러면 'SPB-043' 자전거는 bic_info 테이블에서 기존과 같은 값을 유지해야 하고
-- 4. bic_leave 테이블에도 해당 자전거의 번호에 해당되는 행이 추가되지 않아야 함.


EXEC INS_leave(47, '서울특별시 마포구 백범로 35 서강대학교', '김대건관 K관 앞');
-- 기존에 '방치접수됨' 상태인 자전거
-- 이미 방치 접수 중인 자전거는 접수 불가능 하므로
-- 1. '접수 불가능' 문구를 띄우고
-- 2. ROLLBACK하는 예외처리를 해주어야 한다.
-- 3. 그러면 'SPB-047' 자전거는 bic_info 테이블에서 기존과 같은 값을 유지해야 하고
-- 4. bic_leave 테이블에도 해당 자전거의 번호에 해당되는 행이 추가되지 않아야 함.




	

* 자전거 대여 내역 insert 후 회원별 이용내역 update  
CREATE OR REPLACE PROCEDURE ins_update
(
  pbicycle_rent_id bic_rent.bicycle_rent_id%type,
  pbicycle_id bic_rent.bicycle_id%type,
  puser_id bic_rent.user_id%type,
  pvoucher_id bic_rent.voucher_id%type,
  pstand_id_start bic_rent.stand_id_start%type,
  pstand_id_end bic_rent.stand_id_end%type,
  pbicycle_distance_once bic_rent.bicycle_distance_once%type,
  prent_start_time varchar2,
  prent_return_time varchar2,
  prent_late_fee bic_rent.rent_late_fee%type
)
IS


  vuser_id bic_rent.user_id%type := puser_id;
  vbicycle_distance_once bic_rent.bicycle_distance_once%type;
  vrent_start_time bic_rent.rent_start_time%type:= TO_DATE(prent_start_time, 'YYYY-MM-DD HH24:MI:SS');
  vrent_return_time bic_rent.rent_return_time%type := TO_DATE(prent_return_time, 'YYYY-MM-DD HH24:MI:SS');
  
  vgap number ;
  vtransf number;
  
BEGIN
  INSERT INTO bic_rent (
    bicycle_rent_id, bicycle_id, user_id, voucher_id, stand_id_start, stand_id_end,
    bicycle_distance_once, rent_start_time, rent_return_time, rent_late_fee
  )
  VALUES (
    pbicycle_rent_id, pbicycle_id, puser_id, pvoucher_id, pstand_id_start, pstand_id_end,
    pbicycle_distance_once, vrent_start_time, vrent_return_time, prent_late_fee
  );
  


  SELECT SUM ( bicycle_distance_once)  INTO vbicycle_distance_once
  FROM bic_rent
  WHERE user_id = puser_id;


  SELECT COUNT(*) * 100 INTO vtransf
  FROM transf
  WHERE user_id = puser_id;


  SELECT SUM ( CEIL((rent_return_time - rent_start_time) * 24 * 60) )  INTO vgap 
  FROM bic_rent
  WHERE user_id = puser_id;
  ------------------------------------------------------------
  UPDATE user_using
  SET user_total_mileage  = vtransf
  WHERE user_id = puser_id;


  
  UPDATE user_using
  SET user_used_min = vgap
  WHERE user_id = puser_id;
  
  UPDATE user_using
  SET user_used_km = vbicycle_distance_once
  WHERE user_id = puser_id;
END;


EXEC ins_update('R-31', 'SPB-001', 'ABC123', 'P-1', 'ST-001','ST-001', 3.5, '2023-04-13 15:20:25', '2023-04-13 16:20:00', 0);




	







* 개인정보수정
CREATE OR REPLACE PROCEDURE update_user_info(
    p_user_id IN u_info.user_id%TYPE,
    p_user_password IN u_info.user_password%TYPE DEFAULT NULL,
    p_user_email IN u_info.user_email%TYPE DEFAULT NULL,
    p_user_phone_num IN u_info.user_phone_num%TYPE DEFAULT NULL,
    p_user_weight IN u_info.user_weight%TYPE DEFAULT NULL
)
IS
    -- 유저 정보를 조회할 커서 선언
    CURSOR c_user_info IS
        SELECT user_id, user_password, user_email, user_phone_num, user_weight
        FROM u_info
        WHERE user_id = p_user_id;
    
    -- 커서로 조회한 유저 정보를 저장할 변수 선언
    v_user_id u_info.user_id%TYPE;
    v_user_password u_info.user_password%TYPE;
    v_user_email u_info.user_email%TYPE;
    v_user_phone_num u_info.user_phone_num%TYPE;
    v_user_weight u_info.user_weight%TYPE;
BEGIN
    -- 유저 정보 업데이트
    UPDATE u_info
    SET user_password = NVL(p_user_password, user_password),
        user_email = NVL(p_user_email, user_email),
        user_phone_num = NVL(p_user_phone_num, user_phone_num),
        user_weight = NVL(p_user_weight, user_weight)
    WHERE user_id = p_user_id;


    -- 커서를 이용하여 수정된 유저 정보 출력
    OPEN c_user_info;
    FETCH c_user_info INTO v_user_id, v_user_password, v_user_email, v_user_phone_num, v_user_weight;
    CLOSE c_user_info;
    
    DBMS_OUTPUT.PUT_LINE('수정 후 값');
    DBMS_OUTPUT.PUT_LINE('아이디: ' || v_user_id);
    DBMS_OUTPUT.PUT_LINE('비밀번호: ' || v_user_password);
    DBMS_OUTPUT.PUT_LINE('이메일: ' || v_user_email);
    DBMS_OUTPUT.PUT_LINE('전화번호: ' || v_user_phone_num);
    DBMS_OUTPUT.PUT_LINE('몸무게: ' || v_user_weight);
END;


	







* 상담내역
CREATE OR REPLACE PROCEDURE search_qna (
    p_inquiry_title qna.inquiry_title%TYPE
)
IS
    v_inquiry_title qna.inquiry_title%TYPE := p_inquiry_title;
    v_cursor SYS_REFCURSOR;
    v_inquiry qna.inquiry_title%TYPE;
    v_inquiry_id answ.inquiry_id%TYPE;
    v_user_id answ.user_id%TYPE;
    v_inquiry_status VARCHAR2(20);
    v_inquiry_reg_date qna.inquiry_reg_date%TYPE;
BEGIN
        OPEN v_cursor FOR
            SELECT q.inquiry_title, a.inquiry_id, a.user_id,
                   CASE 
                       WHEN a.reply_content IS NOT NULL THEN '답변완료'
                       ELSE '문의접수됨'
                   END AS answer_status, q.inquiry_reg_date
            FROM qna q LEFT OUTER JOIN answ a ON q.inquiry_id = a.inquiry_id
            WHERE inquiry_title LIKE '%' || v_inquiry_title || '%';


            DBMS_OUTPUT.PUT_LINE('조회된 문의글 목록    ' ||'       '|| '답변상태' ||'      '|| '문의글 등록일자');
        LOOP
            FETCH v_cursor INTO v_inquiry, v_inquiry_id, v_user_id, v_inquiry_status, v_inquiry_reg_date;
            EXIT WHEN v_cursor%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE(v_inquiry||'      '|| v_inquiry_status ||'        '||v_inquiry_reg_date);
        END LOOP;
        IF v_cursor%rowcount = 0 THEN
        DBMS_OUTPUT.PUT_LINE('해당 데이터가 없습니다');
        END IF;
        CLOSE v_cursor;
END;


	







*  일별 매출,일별 이용권 카운트 
CREATE OR REPLACE PROCEDURE ticket_total
(
    p_pad   t_order.order_paidtime%TYPE
)
IS
    vcount11 NUMBER;
    vcount12 NUMBER;
    
    vcount211 NUMBER;
    vcount221 NUMBER;
    
    vcount212 NUMBER;
    vcount222 NUMBER;
    
    vcount213 NUMBER;
    vcount223 NUMBER;
    
    vcount214 NUMBER;
    vcount224 NUMBER;
    
    -------------------------------------------
    vcountprice11 NUMBER ;
    vcountprice12 NUMBER ;
    
    vcountprice211 NUMBER ;
    vcountprice221 NUMBER ;
    
    vcountprice212 NUMBER ;
    vcountprice222 NUMBER ;
    
    vcountprice213 NUMBER ;
    vcountprice223 NUMBER ;
    
    vcountprice214 NUMBER ;
    vcountprice224 NUMBER ;
    
    
BEGIN






    SELECT count(*) INTO vcount11  -- 일일권 11판매 개수 
    FROM t_order
    WHERE order_paidtime = p_pad AND substr(ticket_code , 1,2) = '11';
    
    SELECT count(*) INTO vcount12  -- 일일권 12판매 개수 
    FROM t_order
    WHERE order_paidtime = p_pad AND substr(ticket_code , 1,2) = '12';
    
    ------------------------------------------------------------------
    
    SELECT count(*) INTO vcount211  -- 일일권 211판매 개수 
    FROM t_order
    WHERE order_paidtime = p_pad AND substr(ticket_code , 1,3) = '211';
    
    SELECT count(*) INTO vcount221  -- 일일권 221판매 개수 
    FROM t_order
    WHERE order_paidtime = p_pad AND substr(ticket_code , 1,3) = '221';
    
    SELECT count(*) INTO vcount212  -- 일일권 212판매 개수 
    FROM t_order
    WHERE order_paidtime = p_pad AND substr(ticket_code , 1,3) = '212';
    
    SELECT count(*) INTO vcount222  -- 일일권 222판매 개수 
    FROM t_order
    WHERE order_paidtime = p_pad AND substr(ticket_code , 1,3) = '222';
    
    
    SELECT count(*) INTO vcount213  -- 일일권 213판매 개수 
    FROM t_order
    WHERE order_paidtime = p_pad AND substr(ticket_code , 1,3) = '213';
    
    
    SELECT count(*) INTO vcount223  -- 일일권 223판매 개수 
    FROM t_order
    WHERE order_paidtime = p_pad AND substr(ticket_code , 1,3) = '223';
    
    
    SELECT count(*) INTO vcount214  -- 일일권 214판매 개수 
    FROM t_order
    WHERE order_paidtime = p_pad AND substr(ticket_code , 1,3) = '214';
    
    
    SELECT count(*) INTO vcount224  -- 일일권 224판매 개수 
    FROM t_order
    WHERE order_paidtime = p_pad AND substr(ticket_code , 1,3) = '224';
    
    


    vcountprice11 := vcount11 *1000;
    vcountprice12 := vcount12 *2000;
    
    vcountprice211 := vcount211 *3000;
    vcountprice221 := vcount221 *4000;
    
    vcountprice212 := vcount212 *5000;
    vcountprice222 := vcount222 *7000;
    
    vcountprice213 := vcount213 *15000;
    vcountprice223 := vcount223 *20000;
    
    vcountprice214 := vcount214 * 30000;
    vcountprice224 := vcount224 * 40000;
    


    DBMS_OUTPUT.PUT_LINE('[이용권종류]'|| '[이용권 코드]' ||  '[이용권 판매 수량]' ||'[일간 매출]');
     
    DBMS_OUTPUT.PUT_LINE('   일일권' || '       '|| '11' || '            ' || vcount11 || '          ' || vcountprice11);
    DBMS_OUTPUT.PUT_LINE('   일일권' || '       '|| '12' || '            ' || vcount12 || '          ' || vcountprice12);
    DBMS_OUTPUT.PUT_LINE('   정기권' || '      '|| '211' || '            '|| vcount211 || '          ' || vcountprice211);
    DBMS_OUTPUT.PUT_LINE('   정기권' || '      '|| '221' || '            '|| vcount221 || '          ' || vcountprice221);
    DBMS_OUTPUT.PUT_LINE('   정기권' || '      '|| '212' || '            '|| vcount212 || '          ' || vcountprice212);
    DBMS_OUTPUT.PUT_LINE('   정기권' || '      '|| '222' || '            '|| vcount222 || '          ' || vcountprice222);
    DBMS_OUTPUT.PUT_LINE('   정기권' || '      '|| '213' || '            '|| vcount213 || '          ' || vcountprice213);
    DBMS_OUTPUT.PUT_LINE('   정기권' || '      '|| '223' || '            '|| vcount223 || '          ' || vcountprice223);
    DBMS_OUTPUT.PUT_LINE('   정기권' || '      '|| '214' || '            '|| vcount214 || '          ' || vcountprice214);
    DBMS_OUTPUT.PUT_LINE('   정기권' || '      '|| '224' || '            '|| vcount224 || '          ' || vcountprice224);
    
    
    
            
    
--EXCEPTION
END;


EXECUTE ticket_total ('2022-12-09');
	



* 자전거 추가(최대치 넘으면 오류)
CREATE OR REPLACE PROCEDURE ins_bic_info
(
    pbicycle_id bic_info.bicycle_id%type,
    pbicycle_model bic_info.bicycle_model%type,
    pbicycle_reg_date bic_info.bicycle_reg_date%type,
    pbicycle_stand bic_info.bicycle_stand%type,
    pbicycle_status bic_info.bicycle_status%type
)
IS
    vstand_parking_capacity number;
    vstand_current_storage number;
BEGIN
    INSERT INTO bic_info 
    VALUES (
            pbicycle_id, pbicycle_model, pbicycle_reg_date, pbicycle_stand
            ,pbicycle_status);


    IF pbicycle_status = '대여중' THEN
        UPDATE bic_std
        SET stand_current_storage = stand_current_storage + 1
        WHERE stand_name = pbicycle_stand;
    END IF;


    SELECT stand_current_storage INTO vstand_current_storage
    FROM bic_std
    WHERE stand_name = pbicycle_stand;


    SELECT stand_parking_capacity INTO vstand_parking_capacity
    FROM bic_std
    WHERE stand_name = pbicycle_stand;


    IF vstand_current_storage > vstand_parking_capacity THEN
        DBMS_OUTPUT.PUT_LINE('거치소의 자전거 최대치보다 많습니다');
        ROLLBACK;
    END IF;
END;


execute ins_bic_info('SPB-051','일반','2023-12-14','가락1동주민센터','대여중');
	





*  대여소 추가
CREATE OR REPLACE PROCEDURE add_bic_std (
    p_stand_id IN VARCHAR2,
    p_stand_reg_date IN DATE,
    p_stand_name IN VARCHAR2,
    p_stand_address IN VARCHAR2,
    p_stand_latitude IN NUMBER,
    p_stand_longitude IN NUMBER,
    p_stand_parking_capacity IN NUMBER,
    p_stand_current_storage IN NUMBER DEFAULT 0
)
IS
BEGIN
    INSERT INTO bic_std (
        stand_id,
        stand_reg_date,
        stand_name,
        stand_address,
        stand_latitude,
        stand_longitude,
        stand_parking_capacity,
        stand_current_storage
    ) VALUES (
        p_stand_id,
        p_stand_reg_date,
        p_stand_name,
        p_stand_address,
        p_stand_latitude,
        p_stand_longitude,
        p_stand_parking_capacity,
        p_stand_current_storage
    );
    DBMS_OUTPUT.PUT_LINE('대여소가 추가되었습니다.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('대여소 추가 중 오류가 발생했습니다.');
END;


EXECUTE add_bic_std('ST-006', '2022-10-12', '방아삼거리', '서울특별시 강동구 둔촌동 118-2', 37.523281, 127.146133, 8, 0);


	

*  회원가입


CREATE OR REPLACE PROCEDURE Sign_up
(
    puser_id u_info.user_id%type,
    
    pticket_code u_info.ticket_code%type,
    
    puser_password u_info.user_password%type,
    
    puser_name u_info.user_name%type,
    
    puser_email u_info.user_email%type,


    puser_phone_num u_info.user_phone_num%type,
    
    puser_gender u_info.user_gender%type,
    
    puser_birth u_info.user_birth%type,
    
    puser_weight u_info.user_weight%type,
    
    puser_level u_info.user_level%type




)
IS


    vuser_id u_info.user_id%type;
    
BEGIN
   
    SELECT user_id INTO vuser_id
    FROM u_info
    WHERE user_id = puser_id;
    DBMS_OUTPUT.PUT_LINE('이미 있는 아이디입니다');
 
    
EXCEPTION when no_data_found then
    INSERT INTO u_info(user_id, ticket_code, user_password, user_name, user_email, user_phone_num, user_gender, user_birth, user_weight, user_level)
    VALUES(puser_id, pticket_code, puser_password, puser_name, puser_email, puser_phone_num, puser_gender, puser_birth, puser_weight, puser_level) ;
    
    
    INSERT INTO user_using(user_id, user_total_mileage, user_used_min, user_used_km)
    VALUES (puser_id ,0,0,0) ;
    
 
    DBMS_OUTPUT.PUT_LINE('회원가입 완료!');
    
END;




EXEC Sign_up('ABC922',211,'QWE','장준혁','ksjdh@naver.com','010-4567-8452','남','1995-05-18',45,1);


	

* 회원연체료 조회
CREATE OR REPLACE PROCEDURE late_rental_user_inquire
IS
    v_bicycle_rent_id bic_rent.bicycle_rent_id%TYPE;
    v_bicycle_id bic_rent.bicycle_id%TYPE;
    v_user_id bic_rent.user_id%TYPE;
    v_rent_start_time bic_rent.rent_start_time%TYPE;
    v_rent_return_time bic_rent.rent_return_time%TYPE;
    v_rent_late_fee bic_rent.rent_late_fee%TYPE;
    v_ticket_code u_info.ticket_code%TYPE;
    CURSOR vcur_rent_inquire IS (
        SELECT r.bicycle_rent_id, r.bicycle_id, r.user_id, r.rent_start_time, r.rent_return_time, r.rent_late_fee, i.ticket_code
        FROM bic_rent r
        JOIN u_info i ON r.user_id = i.user_id
        WHERE r.rent_late_fee > 0
    );
BEGIN
    DBMS_OUTPUT.PUT_LINE( '회원연체료 조회' || chr(10) || '출력일자 : ' || SYSDATE || chr(10) || 
    '회원 아이디' || chr(9) || '자전거 식별번호' || chr(9) || '이용권 코드' || chr(9) || '대여 시작 일시' 
    || chr(9) || chr(9) || '대여 반납 일시' || chr(9) || chr(9) || '연체료' || chr(10) ||
    '-------------------------------------------------------------------------------------'
    );
    OPEN vcur_rent_inquire;
    LOOP
    FETCH vcur_rent_inquire INTO v_bicycle_rent_id, v_bicycle_id, v_user_id, v_rent_start_time, v_rent_return_time, v_rent_late_fee, v_ticket_code;
        EXIT WHEN vcur_rent_inquire%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE( 
            v_user_id || chr(9) || chr(9) || v_bicycle_id || chr(9) || chr(9) || chr(9) || v_ticket_code 
            || chr(9) || chr(9) || chr(9) || TO_CHAR( v_rent_start_time, 'YYYY-MM-DD HH24:MI:SS' ) 
            || chr(9) || TO_CHAR( v_rent_return_time, 'YYYY-MM-DD HH24:MI:SS' ) || chr(9) || v_rent_late_fee
            );
    END LOOP;
    CLOSE vcur_rent_inquire;
END;


EXEC late_rental_user_inquire;
	

* 회원이 새로 질문 등록하면 qna 테이블에 insert 되는 프로시져 




CREATE OR REPLACE PROCEDURE IN_my_qna
(
    p_login_id IN qna.user_id%TYPE
    , p_question IN qna.inquiry_title%TYPE
    , p_ques_contents IN qna.inquiry_contents%TYPE
)
IS
    v_user_id qna.user_id%TYPE := p_login_id;
    v_question qna.inquiry_title%TYPE := p_question;
    v_ques_content qna.inquiry_contents%TYPE := p_ques_contents;
    
    v_inquiry_id qna.inquiry_id%TYPE;
    v_reg_date qna.inquiry_reg_date%TYPE := SYSDATE;
    
BEGIN
    DBMS_OUTPUT.PUT_LINE( CHR(10) || ' [ 문의/FAQ ] ' || CHR(10) );
    DBMS_OUTPUT.PUT_LINE( CHR(9) || CHR(9) || CHR(9) || ' 문의 내용을 입력해주세요. ' || CHR(9) || CHR(9) || CHR(9) );
    DBMS_OUTPUT.PUT_LINE( CHR(10) || ' 제목 : ' || v_question || CHR(9) || CHR(10) || ' 내용 : ' || v_ques_content || CHR(9) || CHR(10) );
    
    SELECT MAX(TO_NUMBER(SUBSTR(inquiry_id, 3))) + 1 INTO v_inquiry_id
    FROM qna;
    
    INSERT INTO qna (inquiry_id, user_id, inquiry_title, inquiry_contents, inquiry_reg_date)
    VALUES ( 'Q-' || v_inquiry_id, v_user_id, v_question, v_ques_content, SYSDATE);
    
    DBMS_OUTPUT.PUT_LINE('새로운 질문이 등록되었습니다.');
END;


EXECUTE IN_my_qna('ABC123', '따릉이를 가지고 여행가도 되나요?', '따릉이를 여행에 사용하고 싶은데 가능한지 궁금해요.');


	



* 



	









* 관리자 권한 레벨을 가진 관리자 가 답변 입력할 때 해당하는 질문 제목이 보이고, 관리자가 입력한 답변 내용이 답변 테이블에 업데이트 되는 키워드




CREATE OR REPLACE PROCEDURE IN_answ
(
    p_inquiry_id answ.inquiry_id%TYPE
    , p_user_id  answ.user_id%TYPE 
    , p_reply_content answ.reply_content%TYPE


)
IS
    v_inquiry_id answ.inquiry_id%TYPE := p_inquiry_id;
    v_user_id answ.user_id%TYPE;
    v_reply_content answ.reply_content%TYPE := p_reply_content;
    v_reply_date answ.reply_date%TYPE := SYSDATE;
    v_user_level u_info.user_level%TYPE;
    vadmin u_info.user_id%type;
    v_inquiry_title qna.inquiry_title%type;
BEGIN


    SELECT user_id INTO v_user_id
    FROM u_info
    WHERE user_level = 1 AND user_id = p_user_id;
        
    DBMS_OUTPUT.PUT_LINE('회원 레벨이 부적절하여 답변을 등록할 수 없습니다.');


EXCEPTION when no_data_found then


    SELECT user_id INTO v_user_id
    FROM qna
    WHERE inquiry_id = p_inquiry_id;


    SELECT inquiry_title INTO v_inquiry_title
    FROM qna
    WHERE inquiry_id = p_inquiry_id;


        DBMS_OUTPUT.PUT_LINE(CHR(10) || '[답변 등록]');
        DBMS_OUTPUT.PUT_LINE('회원 아이디: ' || v_user_id);
        DBMS_OUTPUT.PUT_LINE('질문: ' || v_inquiry_title);
        DBMS_OUTPUT.PUT_LINE('답변 작성자(관리자): ' || p_user_id);
        DBMS_OUTPUT.PUT_LINE('답변 작성: ' || p_reply_content);
        DBMS_OUTPUT.PUT_LINE('답변 작성일시: ' || v_reply_date);


    insert into answ (inquiry_id, user_id, reply_content) VALUES (p_inquiry_id,v_user_id, v_inquiry_title);
    
    UPDATE answ
    SET reply_content = p_reply_content
    WHERE inquiry_id  = p_inquiry_id;


END;


EXECUTE IN_answ2('Q-12','ABC123', '답변입니다.');
EXECUTE IN_answ2('Q-12','ABC789', '답변입니다.');